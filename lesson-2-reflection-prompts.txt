What happens when you initialize a repository? Why do you need to do it?
Git creates a '.git' file to keep track of the commit history for the repository
We initialize a repos so that we could save the previous version of our project

How is the staging area different from the working directory and the repository?
It's a middle region to keep the files we consider for a commit. The repository keeps all the version of files that we commited while the working directory keeps the latest version of the files

What value do you think it offers?
It allows users to choose which files they want to keep track of

How can you use the staging area to make sure you have one commit per logical
change?
By using git diff, we could keep track of the changes in working directory and staging area. Then, we could manually add one commit to the staging are. After that, we could submit the commit to the repository

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
We want to try new idea on the project which we might not sure how it works out. In that case, we use branch to keep track of that version of the project and differentiate it from the main project. Later on, if we consider that idea is good enough, we could merge it back to the main project

How do the diagrams help you visualize the branch structure?
It shows the relationships between commits and branches. We could spot which is the master, which is extending branches and where it started sprouting out.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
